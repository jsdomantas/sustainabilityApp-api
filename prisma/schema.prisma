generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  email          String          @unique
  firebaseUserId String          @unique
  DeviceToken    DeviceToken[]
  role           String          @default("basic")
  BusinessOwner  BusinessOwner[]
  Customer       Customer[]
  reviewGiver    Review[]        @relation("giver")
  reviewReceiver Review[]        @relation("receiver")
}

model BusinessOwner {
  id              Int          @id @default(autoincrement())
  userId          Int
  user            User         @relation(fields: [userId], references: [id])
  Offer           Offer[]
  title           String
  usualPickupTime String
  phoneNumber     String
  latitude        Float
  longitude       Float
  products        Ingredient[]
}

model Customer {
  id               Int          @id @default(autoincrement())
  userId           Int
  user             User         @relation(fields: [userId], references: [id])
  fullName         String
  phoneNumber      String
  familyCardNumber String
  photoUrl         String
  Offer            Offer[]
  PantryItem       PantryItem[]
}

model Ingredient {
  id             Int             @id @default(autoincrement())
  title          String          @unique
  businessOwners BusinessOwner[]
  offers         Offer[]
  PantryItem     PantryItem[]
}

model OfferCategory {
  id    Int     @id @default(autoincrement())
  title String  @unique
  Offer Offer[]
}

model Offer {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  category        OfferCategory? @relation(fields: [categoryId], references: [id])
  categoryId      Int?
  title           String
  description     String
  latitude        Float
  longitude       Float
  status          String         @default("posted")
  photoUrl        String
  products        Ingredient[]
  pickupTime      String
  businessOwnerId Int
  reviews         Review[]
  businessOwner   BusinessOwner  @relation(fields: [businessOwnerId], references: [id])
  Customer        Customer?      @relation(fields: [customerId], references: [id])
  customerId      Int?
}

model PantryItem {
  id               Int        @id @default(autoincrement())
  createdAt        DateTime   @default(now())
  expirationDate   String
  photoUrl         String?
  pantryCategory   String
  quantity         Int?
  measurementUnits String?
  customerId       Int
  customer         Customer   @relation(fields: [customerId], references: [id])
  ingredientId     Int
  ingredient       Ingredient @relation(fields: [ingredientId], references: [id])
}

model DeviceToken {
  id         Int    @id @default(autoincrement())
  token      String @unique
  user       User   @relation(fields: [userAuthId], references: [firebaseUserId])
  userAuthId String
}

model Review {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  rating     Int
  comment    String?
  offer      Offer    @relation(fields: [offerId], references: [id])
  offerId    Int
  giver      User     @relation("giver", fields: [giverId], references: [firebaseUserId])
  giverId    String
  receiver   User     @relation("receiver", fields: [receiverId], references: [firebaseUserId])
  receiverId String
}
